export const episodeOne = [
  {
    id: "554a3ca9a8d55a2c",
    type: "api-call-service",
    z: "62022061b503e626",
    name: "",
    server: "228d3d53.df8e02",
    version: 5,
    debugenabled: false,
    domain: "homeassistant",
    service: "{{action}}",
    areaId: [],
    deviceId: [],
    entityId: ["{{entities}}"],
    data: "",
    dataType: "jsonata",
    mergeContext: "",
    mustacheAltTags: false,
    outputProperties: [],
    queue: "none",
    x: 610,
    y: 360,
    wires: [["76c5ddaad67262cf"]],
  },
  {
    id: "b61dbeed8f51ba67",
    type: "server-events",
    z: "62022061b503e626",
    name: "From Telegram",
    server: "228d3d53.df8e02",
    version: 2,
    eventType: "telegram_text",
    exposeToHomeAssistant: false,
    eventData: "",
    haConfig: [
      {
        property: "name",
        value: "",
      },
      {
        property: "icon",
        value: "",
      },
    ],
    waitForRunning: true,
    outputProperties: [
      {
        property: "payload",
        propertyType: "msg",
        value: "",
        valueType: "eventData",
      },
      {
        property: "topic",
        propertyType: "msg",
        value: '$outputData("eventData").event_type',
        valueType: "jsonata",
      },
    ],
    event_type: "",
    x: 120,
    y: 360,
    wires: [["5e4d9d4799961728"]],
  },
  {
    id: "bc1be606f8697887",
    type: "debug",
    z: "62022061b503e626",
    name: "debug 43",
    active: true,
    tosidebar: true,
    console: false,
    tostatus: false,
    complete: "true",
    targetType: "full",
    statusVal: "",
    statusType: "auto",
    x: 1040,
    y: 360,
    wires: [],
  },
  {
    id: "5e4d9d4799961728",
    type: "change",
    z: "62022061b503e626",
    name: "set property",
    rules: [
      {
        t: "set",
        p: "telegramMessage",
        pt: "msg",
        to: "payload.event.text",
        tot: "msg",
      },
    ],
    action: "",
    property: "",
    from: "",
    to: "",
    reg: false,
    x: 330,
    y: 360,
    wires: [["554a3ca9a8d55a2c"]],
  },
  {
    id: "76c5ddaad67262cf",
    type: "api-call-service",
    z: "62022061b503e626",
    name: "respond",
    server: "228d3d53.df8e02",
    version: 5,
    debugenabled: false,
    domain: "telegram_bot",
    service: "send_message",
    areaId: [],
    deviceId: [],
    entityId: [],
    data: '{"message": msg.gptAnswer}',
    dataType: "jsonata",
    mergeContext: "",
    mustacheAltTags: false,
    outputProperties: [],
    queue: "none",
    x: 860,
    y: 360,
    wires: [["bc1be606f8697887"]],
  },
  {
    id: "2785df25da60b6fc",
    type: "inject",
    z: "62022061b503e626",
    name: "",
    props: [
      {
        p: "payload",
      },
      {
        p: "action",
        v: "toggle",
        vt: "str",
      },
      {
        p: "entities",
        v: '["light.office_light_left", "light.office_light_right"]',
        vt: "jsonata",
      },
    ],
    repeat: "",
    crontab: "",
    once: false,
    onceDelay: 0.1,
    topic: "",
    payload: "",
    payloadType: "date",
    x: 180,
    y: 160,
    wires: [["554a3ca9a8d55a2c"]],
  },
  {
    id: "228d3d53.df8e02",
    type: "server",
    name: "Home Assistant",
    addon: true,
  },
];

export const episodeTwo = [
  {
    id: "b61dbeed8f51ba67",
    type: "server-events",
    z: "62022061b503e626",
    name: "From Telegram",
    server: "228d3d53.df8e02",
    version: 2,
    eventType: "telegram_text",
    exposeToHomeAssistant: false,
    eventData: "",
    haConfig: [
      {
        property: "name",
        value: "",
      },
      {
        property: "icon",
        value: "",
      },
    ],
    waitForRunning: true,
    outputProperties: [
      {
        property: "payload",
        propertyType: "msg",
        value: "",
        valueType: "eventData",
      },
      {
        property: "topic",
        propertyType: "msg",
        value: '$outputData("eventData").event_type',
        valueType: "jsonata",
      },
    ],
    event_type: "",
    x: 120,
    y: 360,
    wires: [["5e4d9d4799961728"]],
  },
  {
    id: "bc1be606f8697887",
    type: "debug",
    z: "62022061b503e626",
    name: "debug 43",
    active: true,
    tosidebar: true,
    console: false,
    tostatus: false,
    complete: "true",
    targetType: "full",
    statusVal: "",
    statusType: "auto",
    x: 1060,
    y: 520,
    wires: [],
  },
  {
    id: "5e4d9d4799961728",
    type: "change",
    z: "62022061b503e626",
    name: "set property",
    rules: [
      {
        t: "set",
        p: "prompt",
        pt: "msg",
        to: "payload.event.text",
        tot: "msg",
      },
    ],
    action: "",
    property: "",
    from: "",
    to: "",
    reg: false,
    x: 330,
    y: 360,
    wires: [["c2e9153120e99b6f"]],
  },
  {
    id: "76c5ddaad67262cf",
    type: "api-call-service",
    z: "62022061b503e626",
    name: "respond",
    server: "228d3d53.df8e02",
    version: 5,
    debugenabled: false,
    domain: "telegram_bot",
    service: "send_message",
    areaId: [],
    deviceId: [],
    entityId: [],
    data: '{"message": msg.gptAnswer}',
    dataType: "jsonata",
    mergeContext: "",
    mustacheAltTags: false,
    outputProperties: [],
    queue: "none",
    x: 900,
    y: 520,
    wires: [["bc1be606f8697887"]],
  },
  {
    id: "c2e9153120e99b6f",
    type: "ha-get-entities",
    z: "62022061b503e626",
    name: "",
    server: "228d3d53.df8e02",
    version: 0,
    rules: [
      {
        property: "entity_id",
        logic: "is_not",
        value: "undefined",
        valueType: "jsonata",
      },
    ],
    output_type: "array",
    output_empty_results: false,
    output_location_type: "msg",
    output_location: "payload",
    output_results_count: 1,
    x: 570,
    y: 360,
    wires: [["7aa9a74651365dc9"]],
  },
  {
    id: "7aa9a74651365dc9",
    type: "function",
    z: "62022061b503e626",
    name: "Filter for specific entities",
    func: 'const {payload} = msg;\nconst filters = ["light."]\nconst entities = payload.reduce((aggregate, entity) => {\n    const state = entity.state\n    const name = entity?.attributes?.friendly_name \n    const id = entity.entity_id\n    const canShow = filters.some(filter => {\n        return id.includes(filter)\n    })\n\n    if(name && canShow){\n        aggregate[name] = {\n            state,\n            id: entity.entity_id,\n            name\n        }\n    }\n   \n    return aggregate\n}, {})\n\nmsg.entities = entities;\n\nreturn msg;',
    outputs: 1,
    noerr: 0,
    initialize: "",
    finalize: "",
    libs: [],
    x: 610,
    y: 400,
    wires: [["17b44b9a42e62016"]],
  },
  {
    id: "17b44b9a42e62016",
    type: "function",
    z: "62022061b503e626",
    name: "Template: Answer questions",
    func: 'const { entities, prompt} = msg\nlet entitySummary = ""\n\nObject.keys(entities).forEach((key) => {\n    const entity = entities[key];\n    entitySummary += `${entity.name} has the entity id of ${entity.id} and is is currently ${entity.state}\\n`\n})\n\nconst template = `\nThis smart home named Ke is powered by Home Assistant.\n\nAn overview of the areas and the devices in this smart home:\n${entitySummary}\n\nAnswer the question below  in a conversational tone:\n\n${prompt}\n`\nmsg.prompt = template\n\nreturn msg;',
    outputs: 1,
    noerr: 0,
    initialize: "",
    finalize: "",
    libs: [],
    x: 620,
    y: 440,
    wires: [["912033148d70a8dd"]],
  },
  {
    id: "0fc36c42f90f91f4",
    type: "function",
    z: "62022061b503e626",
    name: "sanitize response",
    func: 'const answer = msg\n.answer\n.data\n.choices[0]\n.text\n.replaceAll("\\n", "")\n.trim()\n\nmsg.gptAnswer = answer\n\nreturn msg;',
    outputs: 1,
    noerr: 0,
    initialize: "",
    finalize: "",
    libs: [],
    x: 590,
    y: 520,
    wires: [["76c5ddaad67262cf"]],
  },
  {
    id: "912033148d70a8dd",
    type: "function",
    z: "62022061b503e626",
    name: "Open AI",
    func: 'const { Configuration, OpenAIApi } = openai;\n\nconst configuration = new Configuration({\n    apiKey: "<use your own api key!>"\n});\n\nconst openaiApi = new OpenAIApi(configuration);\n\n\nopenaiApi.createCompletion({\n    model: "text-davinci-003",\n    prompt: msg.prompt,\n    temperature: 0.7,\n    max_tokens: 1200,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n}).then(answer => {\n    msg.answer = answer\n    node.send(msg);\n    node.done();\n});\n\nreturn',
    outputs: 1,
    noerr: 0,
    initialize: "",
    finalize: "",
    libs: [
      {
        var: "openai",
        module: "openai",
      },
    ],
    x: 560,
    y: 480,
    wires: [["0fc36c42f90f91f4"]],
  },
  {
    id: "228d3d53.df8e02",
    type: "server",
    name: "Home Assistant",
    addon: true,
  },
];
